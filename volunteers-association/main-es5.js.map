{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/models/organization.ts","webpack:///src/app/models/roles.enum.ts","webpack:///src/app/models/user.ts","webpack:///src/app/models/volunteer.ts","webpack:///src/app/register-organization/register-organization.component.ts","webpack:///src/app/register-organization/register-organization.component.html","webpack:///src/app/register-volunteer/register-volunteer.component.ts","webpack:///src/app/register-volunteer/register-volunteer.component.html","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/services/api.service.ts","webpack:///src/app/services/can-activate.service.ts","webpack:///src/app/services/orgnization.service.ts","webpack:///src/app/services/users.service.ts","webpack:///src/app/services/volunteer.service.ts","webpack:///src/app/users/manage-organization/edit/edit.component.ts","webpack:///src/app/users/manage-organization/edit/edit.component.html","webpack:///src/app/users/manage-organization/manage-organization.component.ts","webpack:///src/app/users/manage-organization/manage-organization.component.html","webpack:///src/app/users/manage-users/manage-users.component.ts","webpack:///src/app/users/manage-users/manage-users.component.html","webpack:///src/app/users/manage-users/user/user.component.ts","webpack:///src/app/users/manage-users/user/user.component.html","webpack:///src/app/users/users.component.ts","webpack:///src/app/users/users.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","canActivate","AppRoutingModule","forRoot","imports","AppComponent","usersService","route","title","userSub","user","subscribe","unsubscribe","url","logoutUser","navigate","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","email","phone","HomeComponent","userService","volunteerService","organizationserivce","getAvailOrganizationsorVolunteers","role","volun","obj","getAvailableOrganization","org","organizations","console","log","getAvailableVolunteers","volunteers","orgid","registerToOrganization","suc","registerSuccessMsg","err","alert","error","volunid","find","r","_id","LoginComponent","formBuilder","router","userForm","group","required","password","minLength","valid","login","value","success","errorMsg","setTimeout","OnSubmit","Organization","Roles","User","first_name","last_name","organizationID","Volunteer","RegisterOrganizationComponent","apiService","orgnizationService","newOrgForm","orgName","orgDesc","orgEmail","orgPhone","orgMax","orgHobby","orgRegion","startDate","endDate","getHobbies","response","hobbies","getRegions","regions","name","get","desc","regionCode","hobbyID","maxVolunteers","start","end","createOrganization","buildOrgReq","onFormSubmit","RegisterVolunteerComponent","newVolForm","firstName","lastName","birthDay","array","checkArray","target","checked","push","i","controls","forEach","item","removeAt","vol","map","createVolunteers","buildVolReq","RegisterComponent","newUserForm","iam","pattern","confirmPass","passwordValidators","bind","control","undefined","match","ApiService","http","API_URL","put","organization","post","volunteer","getVolunteers","providedIn","CanActivateService","persmissions","urls","state","observe","next","hasPermission","getResolvedUrl","pathFromRoot","v","segment","toString","join","CanActivateLogin","parseUrl","OrgnizationService","getOrganizations","res","getFreeVolunteers","pipe","o","updateOrganization","length","updatedOrgIndex","findIndex","UsersService","Admin","getUser","customer","setUser","JSON","parse","localStorage","getItem","setItem","stringify","permission","p","_url","u","removeItem","getUsers","Object","k","key","roles","getRoles","roleObj","updateUser","VolunteerService","createVolunteer","getOpenOrganization","registerVolunteerToOrganization","updateVolunteer","EditComponent","editOrganization","emit","onEditOrganization","ManageOrganizationComponent","organizationService","labels","editTitle","submitOrganizationESuccess","submitOrganizationError","isEditOrganization","isNewOrganization","organizationForm","toShowForm","editOrganizationID","printSuccess","printErrMsg","msg","hideMessageTimeout","reset","setValue","modalRef","ManageUsersComponent","modalService","newUserMode","editUserMode","userFromLabels","opErr","opSuccess","valueChanges","setValidators","newOrganization","users","formUser","template","show","organizationToAdd","hide","UserComponent","EditUserClicked","edit","selectedRole","getRoleName","organizationObj","UsersComponent","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { RegisterVolunteerComponent } from './register-volunteer/register-volunteer.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { UsersComponent } from './users/users.component';\nimport { CanActivateService, CanActivateLogin } from './services/can-activate.service';\nimport { HomeComponent } from './home/home.component';\nimport { RegisterComponent } from './register/register.component';\nimport { RegisterOrganizationComponent } from './register-organization/register-organization.component';\n\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent, canActivate: [CanActivateLogin] },\n  { path: 'users', component: UsersComponent, canActivate: [CanActivateService] },\n  { path: 'register', component: RegisterComponent },\n  { path: 'register-volunteer', component: RegisterVolunteerComponent },\n  { path: 'register-organization', component: RegisterOrganizationComponent },\n  { path: '', component: HomeComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { User } from './models/user';\nimport { UsersService } from './services/users.service';\nimport { Subscription } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  title = 'volunteers-association';\n  user: User;\n  userSub: Subscription;\n\n  constructor(private usersService: UsersService, private route: Router) {\n  }\n  ngOnInit() {\n    this.userSub = this.usersService.user.subscribe(user => {\n      this.user = user;\n    });\n  }\n\n  ngOnDestroy() {\n    this.userSub.unsubscribe();\n  }\n  hasPermission(url: string): boolean {\n    // if (this.user) {\n    //   return this.usersService.hasPermission(url);\n    // }\n    return false;\n\n  }\n\n  logout() {\n    this.usersService.logoutUser();\n    this.route.navigate(['/']);\n  }\n}\n","<nav class=\"navbar navbar-default\">\n  <div class=\"container-fluid\">\n    <!-- Brand and toggle get grouped for better mobile display -->\n    <div class=\"navbar-header\">\n      <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\" aria-expanded=\"false\">\n        <span class=\"sr-only\">Toggle navigation</span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </button>\n      <a class=\"navbar-brand\" [routerLink]=\"['/']\">Volunteers Associations</a>\n    </div>\n\n    <!-- Collect the nav links, forms, and other content for toggling -->\n    <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\n      <ul class=\"nav navbar-nav\">\n        <li *ngIf=\"!user\" [routerLinkActive]=\"'active'\"><a [routerLink]=\"['login']\">Login <span class=\"sr-only\">(current)</span></a></li>\n        <li *ngIf=\"hasPermission('/users')\" [routerLinkActive]=\"'active'\"><a  [routerLink]=\"['users']\">Manage Users</a></li>\n      </ul>\n      <!-- <form class=\"navbar-form navbar-left\">\n        <div class=\"form-group\">\n          <input type=\"text\" class=\"form-control\" placeholder=\"Search\">\n        </div>\n        <button type=\"submit\" class=\"btn btn-default\">Submit</button>\n      </form> -->\n      <ul class=\"nav navbar-nav navbar-right\">\n        <li><p class=\"navbar-text\" *ngIf=\"!!user\">Hello, {{ user.first_name }} <a (click)=\"logout()\">(Logout)</a></p></li>\n      </ul>\n    </div><!-- /.navbar-collapse -->\n  </div><!-- /.container-fluid -->\n</nav>\n<div class=\"container\">\n  <div class=\"row\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { UsersComponent } from './users/users.component';\nimport { HomeComponent } from './home/home.component';\nimport { ManageUsersComponent } from './users/manage-users/manage-users.component';\nimport { ManageOrganizationComponent } from './users/manage-organization/manage-organization.component';\nimport { UserComponent } from './users/manage-users/user/user.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { EditComponent } from './users/manage-organization/edit/edit.component';\nimport { RegisterComponent } from './register/register.component';\nimport { RegisterVolunteerComponent } from './register-volunteer/register-volunteer.component';\nimport { RegisterOrganizationComponent } from './register-organization/register-organization.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    UsersComponent,\n    HomeComponent,\n    ManageUsersComponent,\n    ManageOrganizationComponent,\n    UserComponent,\n    EditComponent,\n    RegisterComponent,\n    RegisterVolunteerComponent,\n    RegisterOrganizationComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    ModalModule.forRoot()\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { OrgnizationService } from 'src/app/services/orgnization.service';\nimport { Volunteer } from './../models/volunteer';\nimport { Organization } from './../models/organization';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { UsersService } from '../services/users.service';\nimport { User } from '../models/user';\nimport { Subscription } from 'rxjs';\nimport { VolunteerService } from '../services/volunteer.service';\nimport { typeWithParameters } from '@angular/compiler/src/render3/util';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit, OnDestroy {\n\n  user: User;\n  userSub: Subscription;\n  organizations: Organization[];\n  volunteers: Volunteer[];\n  registerSuccessMsg: boolean;\n  constructor(private userService: UsersService, private volunteerService: VolunteerService, private organizationserivce: OrgnizationService) { }\n\n  ngOnInit(): void {\n    this.userSub = this.userService.user.subscribe(user => {\n      this.user = user;\n      this.getAvailOrganizationsorVolunteers();\n    });\n  }\n  getAvailOrganizationsorVolunteers() {\n    if (this.user) {\n      if (this.user.role === \"volunteer\") {\n        let volun = this.user.obj as Volunteer;\n        if (volun) {\n          this.volunteerService.getAvailableOrganization(volun).subscribe(org => {\n            this.organizations = org;\n            console.log(this.organizations)\n          });\n        }\n      }\n      else {\n        let org = this.user.obj as Organization;\n        if (org) {\n          this.organizationserivce.getAvailableVolunteers(org).subscribe(volun => {\n            this.volunteers = volun;\n            console.log(this.volunteers)\n          });\n        }\n      }\n    }\n\n  }\n  ngOnDestroy() {\n    this.userSub.unsubscribe();\n  }\n  applyToOrg(orgid: string) {\n    if (this.user && orgid) {\n      let volun = this.user.obj as Volunteer;\n      this.volunteerService.registerToOrganization(volun, orgid).subscribe(suc => {\n        if (suc) {\n          this.registerSuccessMsg = true;\n        }\n\n      }, err => {\n        alert(err.error.error);\n      })\n    }\n  }\n  addVolunToOrg(volunid: string) {\n    if (this.user && volunid) {\n      let org = this.user.obj as Organization;\n      let volun = this.volunteers.find(r => r._id == volunid);\n      this.volunteerService.registerToOrganization(volun, org._id).subscribe(suc => {\n        if (suc) {\n          this.registerSuccessMsg = true;\n        }\n\n      }, err => {\n        alert(err.error.error);\n      })\n    }\n  }\n\n}\n","<div class=\"jumbotron\" *ngIf=\"!user\">\n  <h1>Welcome to Volunteer Application!</h1>\n  <div class=\"container\">\n    <div class=\"flex\">\n      <div class=\"small-title\">\n        sign up as:\n      </div>\n      <div class=\"small-title\">\n        Already have an account? <a [routerLink]=\"['login']\">Log in</a>\n      </div>\n    </div>\n    <div class=\"registarion-buttons\">\n      <a class=\"button\" [routerLink]=\"['register-volunteer']\">Volunteer</a>\n      <a class=\"button\" [routerLink]=\"['register-organization']\">Organization</a>\n    </div>\n  </div>\n</div>\n<div class=\"container\" *ngIf=\"user && organizations && !registerSuccessMsg\">\n  <h2>Found {{organizations.length}} available non-profits for you:</h2>\n  <br>\n  <br>\n  <div class=\"row\">\n    <div class=\"col-md-4\" *ngFor=\"let org of organizations\">\n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\">{{org.name}}</div>\n        <div class=\"panel-body\">\n          <div class=\"org-desc\"> {{org.desc}}</div>\n          <br>\n          <button class=\"btn btn-primary\" (click)=\"applyToOrg(org._id)\">Apply</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"container\" *ngIf=\"user && volunteers && !registerSuccessMsg\">\n  <h2>Found {{volunteers.length}} available for your organization:</h2>\n  <br>\n  <br>\n  <div class=\"row\">\n    <div class=\"col-md-4\" *ngFor=\"let volun of volunteers\">\n      <div class=\"panel panel-default\">\n        <div class=\"panel-heading\">{{volun.firstName + \" \" + volun.lastName}}</div>\n        <div class=\"panel-body\">\n          <div class=\"org-desc\">email: {{volun.email}}\n            <br>\n            phone: {{volun.phone}}\n          </div>\n          <br>\n          <button class=\"btn btn-primary\" (click)=\"addVolunToOrg(volun._id)\">Add Volun</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"container\" *ngIf=\"registerSuccessMsg\">\n  <h1>Your request have been submitted</h1>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, Validators } from '@angular/forms';\nimport { UsersService } from '../services/users.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  userForm: FormGroup;\n  errorMsg: string;\n  constructor(private formBuilder: FormBuilder, private userService: UsersService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.userForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(4)]],\n    });\n  }\n\n\n  OnSubmit() {\n    console.log(this.userForm);\n    if (!this.userForm.valid) {\n      return;\n    }\n    this.userService.login(this.userForm.value.email, this.userForm.value.password).subscribe(success => {\n      if (!success) {\n        this.errorMsg = 'Invalid credentials. Please check your user name and password.';\n        setTimeout(() => {\n          this.errorMsg = null;\n        }, 2000);\n      } else {\n        this.router.navigate(['/']);\n      }\n    });\n\n  }\n\n}\n","<h2>Login</h2>\n<hr>\n<form [formGroup]=\"userForm\" (ngSubmit)=\"OnSubmit()\">\n  <div class=\"form-group\"\n    [ngClass]=\"{ 'has-error': userForm.get('email').touched && userForm.get('email').errors != null }\">\n    <!-- First Name -->\n    <label for=\"first_name\" class=\"control-label\">Email</label>\n    <input type=\"text\" class=\"form-control\" id=\"email\" name=\"email\" placeholder=\"User Name\" formControlName=\"email\">\n    <span class=\"help-block\" *ngIf=\"userForm.get('email').touched && userForm.get('email').errors != null\">Missing or\n      Invalid Mail</span>\n  </div>\n  <div class=\"form-group\"\n    [ngClass]=\"{ 'has-error':userForm.get('password').touched && userForm.get('password').errors != null }\">\n    <!-- Password -->\n    <label for=\"password\" class=\"control-label\">Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" placeholder=\"*****\"\n      formControlName=\"password\">\n    <span class=\"help-block\" *ngIf=\"userForm.get('password').touched && userForm.get('password').errors != null\">Missing\n      or Invalid Password</span>\n  </div>\n\n  <div class=\"form-group\">\n    <!-- Register Button -->\n    <button type=\"submit\" class=\"btn btn-primary\">Login</button>\n  </div>\n\n</form>\n<div *ngIf=\"errorMsg && errorMsg !== ''\" class=\"alert alert-danger\">\n  <p>{{ errorMsg }}</p>\n</div>\n\n<p>Don't Have a User? <a [routerLink]=\"['/register']\">Register Here</a></p>\n","export class Organization {\n  _id: string;\n  name: string;\n  desc: string;\n  phone: number;\n  regionCode: string;\n  hobbyID: number;\n  password: string;\n  email: string;\n  maxVolunteers: number;\n  start: Date;\n  end: Date;\n}\n","export enum Roles {\n  Admin = 'admin',\n  Organization = 'organization',\n  Volunteer = 'volunteer'\n}\n","export class User {\n  _id: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  password: string;\n  role: string;\n  organizationID: string;\n  obj: any;\n\n  constructor(first_name: string, last_name: string, email: string, password: string, role: string, organizationID: string, obj: any) {\n    this.first_name = first_name;\n    this.last_name = last_name;\n    this.email = email;\n    this.password = password;\n    this.role = role;\n    this.organizationID = organizationID;\n    this.obj = obj;\n  }\n\n}\n","export class Volunteer {\n    _id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n    password: string;\n    birthDay:Date;\n    phone: number;\n    regions: string[];\n    hobbies: number[];\n    start: Date;\n    end: Date;\n}\n","import { Organization } from 'src/app/models/organization';\nimport { Region } from './../models/Region';\nimport { ApiService } from './../services/api.service';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Hobby } from '../models/Hobby';\nimport { OrgnizationService } from '../services/orgnization.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register-organization',\n  templateUrl: './register-organization.component.html',\n  styleUrls: ['./register-organization.component.css']\n})\nexport class RegisterOrganizationComponent implements OnInit {\n  newOrgForm: FormGroup;\n  hobbies: Hobby[];\n  regions: Region[];\n  constructor(private formBuilder: FormBuilder, private apiService: ApiService, private orgnizationService: OrgnizationService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.newOrgForm = this.formBuilder.group({\n      orgName: ['', [Validators.required]],\n      orgDesc: [''],\n      orgEmail: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(4)]],\n      orgPhone: ['', [Validators.required]],\n      orgMax: [1, [Validators.required]],\n      orgHobby: ['', [Validators.required]],\n      orgRegion: ['', [Validators.required]],\n      startDate: ['', Validators.required],\n      endDate: ['', Validators.required],\n    });\n    this.apiService.getHobbies()\n      .subscribe(response => {\n        this.hobbies = response;\n      });\n    this.apiService.getRegions()\n      .subscribe(response => {\n        this.regions = response;\n      });\n  }\n  buildOrgReq(): Organization {\n    const org = new Organization();\n    org.name = this.newOrgForm.get(\"orgName\").value;\n    org.desc = this.newOrgForm.get(\"orgDesc\").value;\n    org.email = this.newOrgForm.get(\"orgEmail\").value;\n    org.password = this.newOrgForm.get(\"password\").value;\n    org.phone = this.newOrgForm.get(\"orgRegion\").value;\n    org.regionCode = this.newOrgForm.get(\"orgRegion\").value;\n    org.hobbyID = this.newOrgForm.get(\"orgHobby\").value;\n    org.maxVolunteers = this.newOrgForm.get(\"orgMax\").value;\n    org.start = this.newOrgForm.get(\"startDate\").value;\n    org.end = this.newOrgForm.get(\"startDate\").value;\n    return org;\n  }\n  onFormSubmit() {\n    console.log(this.newOrgForm.value);\n    if (!this.newOrgForm.valid) {\n      return;\n    }\n    this.orgnizationService.createOrganization(this.buildOrgReq()).subscribe(suc => {\n      if (suc) {\n        this.router.navigate(['/']);\n      }\n    });\n  }\n}\n","<div class=\"container\">\n  <div class=\"form-holder\">\n    <h1>Register Non Profit Organization</h1>\n    <form [formGroup]=\"newOrgForm\" (ngSubmit)=\"onFormSubmit()\">\n      <div class=\"form-group\"\n        [ngClass]=\"{ 'has-error': newOrgForm.get('orgName').touched && newOrgForm.get('orgName').errors != null }\">\n        <label for=\"n-user-f-name\">Organization Name:</label>\n        <input id=\"n-user-f-name\" type=\"text\" class=\"form-control\" formControlName=\"orgName\">\n        <span class=\"help-block\"\n          *ngIf=\"newOrgForm.get('orgName').touched && newOrgForm.get('orgName').errors != null\">Required Field</span>\n      </div>\n      <div class=\"form-group\">\n      <label for=\"n-org-desc\">Organization Description:</label>\n      <textarea id=\"n-org-desc\" type=\"text\" class=\"form-control\" formControlName=\"orgDesc\"></textarea>\n    </div>\n      <div class=\"form-group\"\n        [ngClass]=\"{ 'has-error': newOrgForm.get('orgEmail').touched && newOrgForm.get('orgEmail').errors != null }\">\n        <label for=\"n-user-email\">Email:</label>\n        <input id=\"n-user-email\" type=\"email\" class=\"form-control\" formControlName=\"orgEmail\">\n        <span class=\"help-block\"\n          *ngIf=\"newOrgForm.get('orgEmail').touched && newOrgForm.get('orgEmail').errors != null\">Invalid Email\n          Address</span>\n      </div>\n      <div class=\"form-group\"\n        [ngClass]=\"{ 'has-error': newOrgForm.get('password').touched && newOrgForm.get('password').errors != null }\">\n        <label for=\"n-user-l-name\">Password</label>\n        <input id=\"n-user-l-name\" type=\"password\" class=\"form-control\" formControlName=\"password\">\n        <span class=\"help-block\"\n          *ngIf=\"newOrgForm.get('password').touched && newOrgForm.get('password').errors != null\">Invalid\n          Password</span>\n      </div>\n      <div class=\"form-group\"\n        [ngClass]=\"{ 'has-error': newOrgForm.get('orgPhone').touched && newOrgForm.get('orgPhone').errors != null }\">\n        <label for=\"n-user-phone\">Phone:</label>\n        <input id=\"n-user-phone\" type=\"number\" class=\"form-control\" formControlName=\"orgPhone\">\n        <span class=\"help-block\"\n          *ngIf=\"newOrgForm.get('orgPhone').touched && newOrgForm.get('orgPhone').errors != null\">Invalid Phone\n        </span>\n      </div>\n      <div class=\"form-group\"\n        [ngClass]=\"{ 'has-error': newOrgForm.get('orgRegion').touched && newOrgForm.get('orgRegion').errors != null }\">\n        <label for=\"n-user-region\">Region of volunteering:</label>\n        <select id=\"n-user-region\" formControlName=\"orgRegion\" class=\"form-control\">\n          <option value=\"\">Select Region</option>\n          <option *ngFor=\"let region of regions\" [ngValue]=\"region.shortCode\">\n            {{\n                region.name\n              }}\n          </option>\n        </select>\n      </div>\n      <div class=\"form-group\"\n        [ngClass]=\"{ 'has-error': newOrgForm.get('orgHobby').touched && newOrgForm.get('orgHobby').errors != null }\">\n        <label for=\"n-user-type\">Type of volunteering:</label>\n        <select id=\"n-user-type\" formControlName=\"orgHobby\" class=\"form-control\">\n          <option value=\"\">Select Volunteering Type</option>\n          <option *ngFor=\"let hobby of hobbies\" [ngValue]=\"hobby.ID\">\n            {{\n                    hobby.name\n                }}\n          </option>\n        </select>\n      </div>\n      <div class=\"form-group\"\n        [ngClass]=\"{ 'has-error': newOrgForm.get('orgMax').touched && newOrgForm.get('orgMax').errors != null }\">\n        <label for=\"n-user-max\">Max Volunteers:</label>\n        <input id=\"n-user-max\" type=\"number\" class=\"form-control\" formControlName=\"orgMax\" min=\"1\">\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>Orgnization Active Between:</h2>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"n-user-startdate\">Start Date</label>\n            <input id=\"n-user-startdate\" type=\"date\" class=\"form-control\" formControlName=\"startDate\" min=\"2020-09-01\">\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"n-user-enddate\">End Date</label>\n            <input id=\"n-user-enddate\" type=\"date\" class=\"form-control\" formControlName=\"endDate\" min=\"2020-09-02\">\n          </div>\n        </div>\n      </div>\n      <button class=\"btn btn-primary\" type=\"submit\">Submit</button>\n    </form>\n  </div>\n</div>\n","import { VolunteerService } from './../services/volunteer.service';\nimport { Volunteer } from './../models/volunteer';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormArray, FormControl } from '@angular/forms';\nimport { Hobby } from '../models/Hobby';\nimport { Region } from '../models/Region';\nimport { ApiService } from '../services/api.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register-volunteer',\n  templateUrl: './register-volunteer.component.html',\n  styleUrls: ['./register-volunteer.component.css']\n})\nexport class RegisterVolunteerComponent implements OnInit {\n\n  newVolForm: FormGroup;\n  hobbies: Hobby[];\n  regions: Region[];\n  constructor(private formBuilder: FormBuilder, private apiService: ApiService, private volunteerService: VolunteerService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.newVolForm = this.formBuilder.group({\n      firstName: ['', [Validators.required]],\n      lastName: ['', [Validators.required]],\n      birthDay: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(4)]],\n      email: ['', [Validators.required, Validators.email]],\n      phone: ['', [Validators.required]],\n      hobbies: this.formBuilder.array([], [Validators.required]),\n      regions: this.formBuilder.array([], [Validators.required]),\n      startDate: ['', Validators.required],\n      endDate: ['', Validators.required],\n    });\n    this.apiService.getHobbies()\n      .subscribe(response => {\n        this.hobbies = response;\n      });\n    this.apiService.getRegions()\n      .subscribe(response => {\n        this.regions = response;\n      });\n  }\n  onCheckboxChange(e, name) {\n    const checkArray: FormArray = this.newVolForm.get(name) as FormArray;\n    if (e.target.checked) {\n      checkArray.push(new FormControl(e.target.value));\n    } else {\n      let i: number = 0;\n      checkArray.controls.forEach((item: FormControl) => {\n        if (item.value == e.target.value) {\n          checkArray.removeAt(i);\n          return;\n        }\n        i++;\n      });\n    }\n  }\n  buildVolReq(): Volunteer {\n    const vol = new Volunteer();\n    vol.firstName = this.newVolForm.get(\"firstName\").value;\n    vol.lastName = this.newVolForm.get(\"lastName\").value;\n    vol.birthDay = this.newVolForm.get(\"birthDay\").value;\n    vol.password = this.newVolForm.get(\"password\").value;\n    vol.email = this.newVolForm.get(\"email\").value;\n    vol.phone = this.newVolForm.get(\"phone\").value;\n    vol.start = this.newVolForm.get(\"startDate\").value;\n    vol.end = this.newVolForm.get(\"endDate\").value;\n    vol.hobbies = this.newVolForm.get(\"hobbies\").value.map(r => +r);\n    vol.regions = this.newVolForm.get(\"regions\").value;\n    return vol;\n  }\n  onFormSubmit() {\n    console.log(this.newVolForm.value);\n    if (!this.newVolForm.valid) {\n      return;\n    }\n    this.volunteerService.createVolunteers(this.buildVolReq()).subscribe(suc => {\n      if (suc) {\n        this.router.navigate(['/']);\n      }\n    });\n  }\n}\n","<div class=\"container\">\n  <div class=\"form-holder\">\n    <h1>Register New Volunteer</h1>\n    <form [formGroup]=\"newVolForm\" (ngSubmit)=\"onFormSubmit()\">\n      <div class=\"form-group\"\n        [ngClass]=\"{ 'has-error': newVolForm.get('firstName').touched && newVolForm.get('firstName').errors != null }\">\n        <label for=\"n-user-f-name\">First Name:</label>\n        <input id=\"n-user-f-name\" type=\"text\" class=\"form-control\" formControlName=\"firstName\">\n        <span class=\"help-block\"\n          *ngIf=\"newVolForm.get('firstName').touched && newVolForm.get('firstName').errors != null\">Required\n          Field</span>\n      </div>\n      <div class=\"form-group\"\n        [ngClass]=\"{ 'has-error': newVolForm.get('lastName').touched && newVolForm.get('lastName').errors != null }\">\n        <label for=\"n-user-l-name\">Last Name:</label>\n        <input id=\"n-user-l-name\" type=\"text\" class=\"form-control\" formControlName=\"lastName\">\n        <span class=\"help-block\"\n          *ngIf=\"newVolForm.get('lastName').touched && newVolForm.get('lastName').errors != null\">Required Field</span>\n      </div>\n      <div class=\"form-group\"\n        [ngClass]=\"{ 'has-error': newVolForm.get('email').touched && newVolForm.get('email').errors != null }\">\n        <label for=\"n-user-email\">Email:</label>\n        <input id=\"n-user-email\" type=\"email\" class=\"form-control\" formControlName=\"email\">\n        <span class=\"help-block\"\n          *ngIf=\"newVolForm.get('email').touched && newVolForm.get('email').errors != null\">Invalid Email\n          Address</span>\n      </div>\n      <div class=\"form-group\"\n        [ngClass]=\"{ 'has-error': newVolForm.get('password').touched && newVolForm.get('password').errors != null }\">\n        <label for=\"n-user-l-name\">Password</label>\n        <input id=\"n-user-l-name\" type=\"password\" class=\"form-control\" formControlName=\"password\">\n        <span class=\"help-block\"\n          *ngIf=\"newVolForm.get('password').touched && newVolForm.get('password').errors != null\">Invalid\n          Password</span>\n      </div>\n      <div class=\"form-group\"\n        [ngClass]=\"{ 'has-error': newVolForm.get('birthDay').touched && newVolForm.get('birthDay').errors != null }\">\n        <label for=\"n-user-birthDay\">Birth Day</label>\n        <input id=\"n-user-birthDay\" type=\"date\" class=\"form-control\" formControlName=\"birthDay\"  max=\"2004-12-31\">\n        <span class=\"help-block\"\n          *ngIf=\"newVolForm.get('birthDay').touched && newVolForm.get('birthDay').errors != null\">Required\n          Field</span>\n      </div>\n      <div class=\"form-group\"\n        [ngClass]=\"{ 'has-error': newVolForm.get('phone').touched && newVolForm.get('phone').errors != null }\">\n        <label for=\"n-user-phone\">Phone:</label>\n        <input id=\"n-user-phone\" type=\"number\" class=\"form-control\" formControlName=\"phone\">\n        <span class=\"help-block\"\n          *ngIf=\"newVolForm.get('phone').touched && newVolForm.get('phone').errors != null\">Invalid Phone\n        </span>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"n-user-type\">Type of volunteering:</label>\n            <p class=\"error\" *ngIf=\"this.newVolForm.controls['hobbies'].errors?.required\">\n              Hobby is required, select at least one value.\n            </p>\n            <div *ngFor=\"let hobby of hobbies; let i=index\">\n              <label>\n                <input type=\"checkbox\" [value]=\"hobby.ID\" (change)=\"onCheckboxChange($event,'hobbies')\" />\n                {{hobby.name}}\n              </label>\n            </div>\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"n-user-type\">Region of volunteering:</label>\n            <p class=\"error\" *ngIf=\"this.newVolForm.controls['regions'].errors?.required\">\n              Region is required, select at least one value.\n            </p>\n            <div *ngFor=\"let region of regions; let i=index\">\n              <label>\n                <input type=\"checkbox\" [value]=\"region.shortCode\" (change)=\"onCheckboxChange($event,'regions')\" />\n                {{region.name}}\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <h2>When are you available:</h2>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"n-user-startdate\">Start Date</label>\n            <input id=\"n-user-startdate\" type=\"date\" class=\"form-control\" formControlName=\"startDate\" min=\"2020-09-01\">\n          </div>\n        </div>\n        <div class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label for=\"n-user-enddate\">End Date</label>\n            <input id=\"n-user-enddate\" type=\"date\" class=\"form-control\" formControlName=\"endDate\" min=\"2020-09-02\">\n          </div>\n        </div>\n      </div>\n      <button class=\"btn btn-primary\" type=\"submit\">Submit</button>\n    </form>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, AbstractControl, FormBuilder } from '@angular/forms';\nimport { format } from 'path';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  newUserForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.newUserForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      firstName: ['', [Validators.required]],\n      lastName: ['', [Validators.required]],\n      iam: ['', [Validators.required]],\n      password: ['', [Validators.required, Validators.minLength(4), Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')]],\n      confirmPass: ['', [Validators.required, this.passwordValidators.bind(this)]]\n    });\n  }\n  passwordValidators(control: AbstractControl): { [key: string]: boolean } | null {\n    if (control.value !== undefined && this.newUserForm && this.newUserForm.get('password') && control.value !== this.newUserForm.get('password').value) {\n      return { match: true };\n    }\n    return null;\n  }\n\n\n\n  onFormSubmit() {\n    console.log(this.newUserForm.value);\n  }\n\n}\n","<h1>Register User</h1>\n<form [formGroup]=\"newUserForm\" (ngSubmit)=\"onFormSubmit()\">\n  <div class=\"form-group\" [ngClass]=\"{ 'has-error': newUserForm.get('email').touched && newUserForm.get('email').errors != null }\">\n    <label for=\"n-user-email\">Email:</label>\n    <input id=\"n-user-email\" type=\"email\" class=\"form-control\" formControlName=\"email\">\n    <span class=\"help-block\" *ngIf=\"newUserForm.get('email').touched && newUserForm.get('email').errors != null\">Invalid Email Address</span>\n  </div>\n  <div class=\"form-group\" [ngClass]=\"{ 'has-error': newUserForm.get('firstName').touched && newUserForm.get('firstName').errors != null }\">\n    <label for=\"n-user-f-name\">First Name:</label>\n    <input id=\"n-user-f-name\" type=\"text\" class=\"form-control\" formControlName=\"firstName\">\n    <span class=\"help-block\" *ngIf=\"newUserForm.get('firstName').touched && newUserForm.get('firstName').errors != null\">Required Field</span>\n  </div>\n  <div class=\"form-group\" [ngClass]=\"{ 'has-error': newUserForm.get('lastName').touched && newUserForm.get('lastName').errors != null }\">\n    <label for=\"n-user-l-name\">Last Name:</label>\n    <input id=\"n-user-l-name\" type=\"text\" class=\"form-control\" formControlName=\"lastName\">\n    <span class=\"help-block\" *ngIf=\"newUserForm.get('lastName').touched && newUserForm.get('lastName').errors != null\">Required Field</span>\n  </div>\n  <div class=\"form-group\" [ngClass]=\"{ 'has-error': newUserForm.get('iam').touched && newUserForm.get('iam').errors != null }\">\n    <label>I am</label>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"iam\" id=\"organization-owner\" value=\"o\" checked formControlName=\"iam\">\n        Organization Owner\n      </label>\n    </div>\n    <div class=\"radio\">\n      <label>\n        <input type=\"radio\" name=\"iam\" id=\"volunteer\" value=\"v\" formControlName=\"iam\">\n        Volunteer\n      </label>\n    </div>\n    <span class=\"help-block\" *ngIf=\"newUserForm.get('iam').touched && newUserForm.get('iam').errors != null\">Required Field</span>\n  </div>\n  <div class=\"form-group\" [ngClass]=\"{ 'has-error': newUserForm.get('password').touched && newUserForm.get('password').errors != null }\">\n    <label for=\"n-user-pass\">Password:</label>\n    <input type=\"password\" id=\"n-user-pass\" class=\"form-control\" formControlName=\"password\">\n    <span class=\"help-block\" *ngIf=\"newUserForm.get('password').touched && newUserForm.get('password').errors != null\">Invalid Password</span>\n  </div>\n  <div class=\"form-group\" [ngClass]=\"{ 'has-error': newUserForm.get('confirmPass').touched && newUserForm.get('confirmPass').errors != null }\">\n    <label for=\"n-user-c-pass\">Confirm Password:</label>\n    <input type=\"password\" id=\"n-user-c-pass\" class=\"form-control\" formControlName=\"confirmPass\">\n    <span class=\"help-block\" *ngIf=\"newUserForm.get('confirmPass').touched && newUserForm.get('confirmPass').errors != null\">Passwords Must Match</span>\n  </div>\n  <button class=\"btn btn-primary\" type=\"submit\">Register</button>\n</form>\n","import { Organization } from 'src/app/models/organization';\nimport { Volunteer } from './../models/volunteer';\nimport { Hobby } from './../models/Hobby';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { User } from '../models/user';\nimport { promise } from 'protractor';\nimport { Observable } from 'rxjs';\nimport { Region } from '../models/Region';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(private http: HttpClient) { }\n  private readonly API_URL = 'https://volunteer-api-node.herokuapp.com/api/v1/'//'http://localhost:3000/api/v1/';\n\n  getUser(email: string): Observable<{ customer: User }> {\n    return this.http.get<{ customer: User }>(this.API_URL + 'customer/' + email);\n  }\n\n  getUsers(): Observable<User[]> {\n    return this.http.get<User[]>(this.API_URL + 'customer');\n  }\n\n  updateUser(user: User): Observable<{ customer: User }> {\n    return this.http.put<{ customer: User }>(this.API_URL + 'customer/' + user._id, user);\n  }\n\n  getOrganizations(): Observable<Organization[]> {\n    return this.http.get<Organization[]>(this.API_URL + 'organization');\n  }\n\n  createOrganization(organization: Organization): Observable<{ organization: Organization }> {\n    return this.http.post<{ organization: Organization }>(this.API_URL + 'organization', organization);\n  }\n  updateOrganization(organization: Organization): Observable<void> {\n    return this.http.put<void>(this.API_URL + 'organization/' + organization._id, organization);\n  }\n  getHobbies(): Observable<Hobby[]> {\n    return this.http.get<Hobby[]>(this.API_URL + 'hobbies');\n  }\n  getRegions(): Observable<Region[]> {\n    return this.http.get<Region[]>(this.API_URL + 'regions');\n  }\n  getVolunteers(): Observable<Volunteer[]> {\n    return this.http.get<Volunteer[]>(this.API_URL + 'volunteer');\n  }\n\n  createVolunteer(volunteer: Volunteer): Observable<{ volunteer: Volunteer }> {\n    return this.http.post<{ volunteer: Volunteer }>(this.API_URL + 'volunteer', volunteer);\n  }\n  updateVolunteer(volunteer: Volunteer): Observable<void> {\n    return this.http.put<void>(this.API_URL + 'volunteer/' + volunteer._id, volunteer);\n  }\n  getOpenOrganization(volunteer: Volunteer): Observable<Organization[]> {\n    return this.http.get<Organization[]>(this.API_URL + 'volunteer/organizations/' + volunteer.email);\n  }\n  getFreeVolunteers(org: Organization): Observable<Volunteer[]> {\n    return this.getVolunteers();\n   // return this.http.get<Volunteer[]>(this.API_URL + 'organizations/volunteer/' + org._id);\n  }\n  registerVolunteerToOrganization(volunteer: Volunteer, orgid: string): Observable<boolean> {\n    return this.http.put<boolean>(this.API_URL + 'volunteer/register/' + volunteer.email + '/' + orgid, null);\n  }\n  \n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, CanActivate, Router } from '@angular/router';\nimport { Observable, observable } from 'rxjs';\nimport { UsersService } from './users.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CanActivateService implements CanActivate {\n\n  private persmissions: { role: string, urls: string[] }[] = [{\n    role: 'admin', urls: ['users']\n  }];\n  constructor(private userService: UsersService) { }\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return new Observable(observe => {\n      this.userService.user.subscribe(user => {\n        observe.next(this.userService.hasPermission(this.getResolvedUrl(route)));\n      });\n    });\n  }\n\n  private getResolvedUrl(route: ActivatedRouteSnapshot): string {\n    return route.pathFromRoot\n      .map(v => v.url.map(segment => segment.toString()).join('/'))\n      .join('/');\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CanActivateLogin implements CanActivate {\n  constructor(private userService: UsersService, private router: Router) { }\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return new Observable(observe => {\n      this.userService.user.subscribe(user => {\n        if (!!user) {\n          observe.next(this.router.parseUrl('/'));\n        } else {\n          observe.next(true);\n        }\n      });\n    });\n  }\n}\n","import { Volunteer } from './../models/volunteer';\nimport { Organization } from 'src/app/models/organization';\nimport { Injectable } from '@angular/core';\nimport { ApiService } from './api.service';\nimport { Observable, BehaviorSubject, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrgnizationService {\n\n  organizations: BehaviorSubject<Organization[]> = new BehaviorSubject([]);\n\n  constructor(private apiService: ApiService) {\n    this.getOrganizations().subscribe(res => this.organizations.next(res));\n  }\n\n  getOrganizations(): Observable<Organization[]> {\n    return this.apiService.getOrganizations();\n  }\n  getAvailableVolunteers(org: Organization): Observable<Volunteer[]> {\n    return this.apiService.getFreeVolunteers(org);\n  }\n  createOrganization(organization: Organization): Observable<Organization> {\n    return this.apiService.createOrganization(organization).pipe(map(o => o.organization));\n  }\n\n  updateOrganization(organization: Organization): Observable<boolean> {\n    return this.apiService.updateOrganization(organization).pipe(map(res => true),\n      tap(res => {\n        if (res && this.organizations.value && this.organizations.value.length) {\n          const updatedOrgIndex = this.organizations.value.findIndex(o => o._id === organization._id);\n          if (updatedOrgIndex > -1) {\n            this.organizations.value[updatedOrgIndex] = organization;\n            this.organizations.next(this.organizations.value);\n          }\n        }\n      }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { User } from '../models/user';\nimport { ApiService } from './api.service';\nimport { map } from 'rxjs/operators';\nimport { Roles } from '../models/roles.enum';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n\n  constructor(private apiService: ApiService) {\n    this.getUser();\n  }\n\n  user = new BehaviorSubject<User>(null);\n  private persmissions: { role: string, urls: string[] }[] = [{\n    role: Roles.Admin, urls: ['/users']\n  }];\n  login(email: string, password: string): Observable<boolean> {\n    return this.apiService.getUser(email).pipe(map(user => {\n      if (user && user.customer && user.customer.password === password) {\n        this.setUser(user.customer);\n        this.user.next(user.customer);\n        return true;\n      }\n      return false;\n    }));\n  }\n  getUser() {\n    try {\n      const user = JSON.parse(localStorage.getItem('curentuser')) as User;\n      if (user) {\n        this.user.next(user);\n      }\n    } catch (e) { }\n  }\n\n  setUser(user: User) {\n    if (user) {\n      localStorage.setItem('curentuser', JSON.stringify(user));\n    }\n  }\n\n  hasPermission(url: string): boolean {\n    if (this.user.value) {\n      let permission: { role: string, urls: string[] };\n      permission = this.persmissions.find(p => p.role === this.user.value.role);\n      if (permission) {\n        const _url = permission.urls.find(u => u === url);\n        return !!_url;\n      }\n    }\n    return false;\n  }\n\n  logoutUser() {\n    localStorage.removeItem('curentuser');\n    this.user.next(null);\n  }\n\n  getUsers(): Observable<User[]> {\n    return this.apiService.getUsers();\n\n  }\n\n  getRoles(): { name: string, key: string }[] {\n    return Object.keys(Roles).map(k => {\n      return { name: k, key: Roles[k] }\n    });\n  }\n  getRoleName(role: string) {\n    const roles = this.getRoles();\n    if (roles && roles.length) {\n      const roleObj = roles.find(r => r.key === role);\n      if (roleObj) {\n        return roleObj.name;\n      }\n      return role;\n    }\n  }\n\n  updateUser(user: User): Observable<boolean> {\n    return this.apiService.updateUser(user).pipe((map(u => !!u.customer)));\n  }\n}\n","import { Organization } from './../models/organization';\nimport { Volunteer } from './../models/volunteer';\nimport { Injectable } from '@angular/core';\nimport { ApiService } from './api.service';\nimport { Observable, BehaviorSubject, of, observable } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VolunteerService {\n\n  volunteers: BehaviorSubject<Volunteer[]> = new BehaviorSubject([]);\n\n  constructor(private apiService: ApiService) {\n    //this.getVolunteers().subscribe(res => this.volunteers.next(res));\n  }\n\n  getVolunteers(): Observable<Volunteer[]> {\n    return this.apiService.getVolunteers();\n  }\n  createVolunteers(volunteer: Volunteer): Observable<Volunteer> {\n    return this.apiService.createVolunteer(volunteer).pipe(map(o => o.volunteer));\n  }\n  getAvailableOrganization(volunteer: Volunteer): Observable<Organization[]> {\n    return this.apiService.getOpenOrganization(volunteer);\n  }\n  registerToOrganization(volunteer: Volunteer, org: string): Observable<boolean> {\n    return this.apiService.registerVolunteerToOrganization(volunteer, org);\n  }\n\n  updateVolunteer(volunteer: Volunteer): Observable<boolean> {\n    return this.apiService.updateVolunteer(volunteer).pipe(map(res => true),\n      tap(res => {\n        if (res && this.volunteers.value && this.volunteers.value.length) {\n          const updatedOrgIndex = this.volunteers.value.findIndex(o => o._id === volunteer._id);\n          if (updatedOrgIndex > -1) {\n            this.volunteers.value[updatedOrgIndex] = volunteer;\n            this.volunteers.next(this.volunteers.value);\n          }\n        }\n      }));\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Organization } from 'src/app/models/organization';\n\n@Component({\n  selector: 'app-organization-edit, [app-organization-edit]',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.css']\n})\nexport class EditComponent implements OnInit {\n\n  @Input() organization: Organization;\n  @Output() editOrganization = new EventEmitter<Organization>();\n  constructor() { }\n\n  ngOnInit(): void {\n    console.log('init');\n  }\n\n  onEditOrganization() {\n    this.editOrganization.emit(this.organization);\n  }\n\n\n\n}\n","<td>{{ organization._id }}</td>\n<td>{{ organization.name }}</td>\n<td>{{ organization.desc }}</td>\n<td><a (click)=\"onEditOrganization()\">Edit <span class=\"glyphicon glyphicon-pencil\"></span></a></td>\n","import { Component, OnInit } from '@angular/core';\nimport { Organization } from 'src/app/models/organization';\nimport { OrgnizationService } from 'src/app/services/orgnization.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-manage-organization',\n  templateUrl: './manage-organization.component.html',\n  styleUrls: ['./manage-organization.component.css']\n})\nexport class ManageOrganizationComponent implements OnInit {\n  organizations: Organization[];\n\n  labels: { submitOrganizationError: string, submitOrganizationESuccess: string, editTitle: string } = {\n    editTitle: null, submitOrganizationESuccess: null, submitOrganizationError: null\n  };\n  constructor(private organizationService: OrgnizationService) { }\n  isEditOrganization = false;\n  isNewOrganization = false;\n  organizationForm: FormGroup;\n  editOrganizationID: string;\n  ngOnInit(): void {\n    this.organizationService.organizations.subscribe(res => {\n      console.log(res);\n      this.organizations = res;\n    });\n\n    this.organizationForm = new FormGroup({\n      name: new FormControl(null, [Validators.required]),\n      desc: new FormControl(null)\n    });\n  }\n\n\n  onToggleOrganization(toShowForm: boolean) {\n    this.isNewOrganization = toShowForm;\n  }\n\n  cancelEdit() {\n    this.isEditOrganization = false;\n  }\n\n  OnOrganizationSubmit() {\n\n    if (this.organizationForm.valid) {\n\n      const organization: Organization = new Organization();\n      organization.name = this.organizationForm.value.name;\n      organization.desc = this.organizationForm.value.desc;\n\n      if (this.isEditOrganization) {\n        organization._id = this.editOrganizationID;\n        this.organizationService.updateOrganization(organization).subscribe(res => {\n          this.printSuccess('Organization ' + organization.name + ' was updated successfully');\n        }, err => {\n          this.printErrMsg('Failed to update organization');\n        });\n\n      }\n    }\n\n  }\n  private printSuccess(msg: string) {\n    this.labels.submitOrganizationESuccess = msg;\n    this.hideMessageTimeout();\n  }\n  private printErrMsg(msg: string) {\n    this.labels.submitOrganizationError = msg;\n    this.hideMessageTimeout();\n  }\n  private hideMessageTimeout() {\n    setTimeout(() => {\n      this.labels.submitOrganizationError = null;\n      this.labels.submitOrganizationESuccess = null;\n    }, 2500);\n  }\n  EditOrganization(organization: Organization) {\n    //console.log('edit0');\n    this.isEditOrganization = true;\n    this.isNewOrganization = false;\n    this.editOrganizationID = organization._id;\n    this.organizationForm.reset();\n    this.labels.editTitle = 'Edit Organization: ' + organization.name;\n    this.organizationForm.setValue({\n      name: organization.name,\n      desc: organization.desc\n    });\n\n  }\n}\n","<h4>Manage Organizations</h4>\n<table class=\"table table-striped\">\n  <tbody>\n    <tr>\n      <th>ID</th>\n      <th>Name </th>\n      <th>Description</th>\n      <th></th>\n    </tr>\n    <tr app-organization-edit *ngFor=\"let organization of organizations\" [organization]=\"organization\" (editOrganization)=\"EditOrganization($event)\"></tr>\n  </tbody>\n</table>\n<button (click)=\"onToggleOrganization(true)\" *ngIf=\"!isNewOrganization && !isEditOrganization\" type=\"button\" class=\"btn btn-primary\"><span\n    class=\"glyphicon glyphicon-plus-sign\"></span>\n  Add New Orghanization</button>\n<button (click)=\"onToggleOrganization(false)\" *ngIf=\"isNewOrganization && !isEditOrganization\" type=\"button\"\n  class=\"btn btn-secondary\">Close</button>\n\n<h4 *ngIf=\"isEditOrganization\">{{ labels.editTitle }}<button [ngStyle]=\"{ marginLeft: '20px' }\"\n    class=\"btn btn-secondary\" (click)=\"cancelEdit()\">Cancel</button>\n</h4>\n<form [formGroup]=\"organizationForm\" (ngSubmit)=\"OnOrganizationSubmit()\" *ngIf=\"isNewOrganization || isEditOrganization\">\n  <div class=\"form-group\"\n    [ngClass]=\"{ 'has-error': organizationForm.get('name').touched && organizationForm.get('name').errors != null }\">\n    <label for=\"new-email\">Organization Name</label>\n    <input type=\"text\" id=\"new-org-name\" class=\"form-control\" formControlName=\"name\" />\n    <span class=\"help-block\" *ngIf=\"organizationForm.get('name').touched && organizationForm.get('name').errors\">Invalid\n      Name</span>\n  </div>\n  <div class=\"form-group\"\n    [ngClass]=\"{ 'has-error': organizationForm.get('desc').touched && organizationForm.get('desc').errors != null }\">\n    <label for=\"new-org-desc\">Organization Description</label>\n    <input type=\"text\" id=\"new-org-desc\" class=\"form-control\" formControlName=\"desc\" />\n    <span class=\"help-block\" *ngIf=\"organizationForm.get('desc').touched && organizationForm.get('desc').errors\">Invalid\n      First Description</span>\n  </div>\n  <button type=\"button\" [disabled]=\"organizationForm.invalid\" class=\"btn btn-success\" (click)=\"OnOrganizationSubmit()\">Submit Organization</button>\n</form>\n\n<div class=\"alert alert-danger\" *ngIf=\"labels.submitOrganizationError\">\n  <p>{{ labels.submitOrganizationError }}</p>\n</div>\n<div class=\"alert alert-success\" *ngIf=\"labels.submitOrganizationESuccess\">\n  <p>{{ labels.submitOrganizationESuccess }}</p>\n</div>\n\n","import { Component, OnInit, TemplateRef } from '@angular/core';\nimport { User } from 'src/app/models/user';\nimport { UsersService } from 'src/app/services/users.service';\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { Organization } from 'src/app/models/organization';\n\nimport { OrgnizationService } from 'src/app/services/orgnization.service';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\n\n@Component({\n  selector: 'app-manage-users',\n  templateUrl: './manage-users.component.html',\n  styleUrls: ['./manage-users.component.css']\n})\nexport class ManageUsersComponent implements OnInit {\n\n  users: User[];\n  newUserForm: FormGroup;\n  newOrganization: FormGroup;\n  roles: { name: string, key: string }[] = [];\n  organizations: Organization[] = null;\n  newUserMode = false;\n  editUserMode = false;\n  selectedRole: string;\n\n  userFromLabels: { opErr: string, opSuccess: string, editTitle: string } = { editTitle: null, opErr: null, opSuccess: null };\n  modalRef: BsModalRef;\n\n\n  constructor(private userService: UsersService, private organizationService: OrgnizationService,\n    private formBuilder: FormBuilder, private modalService: BsModalService) { }\n\n  ngOnInit(): void {\n\n    this.roles = this.userService.getRoles();\n    this.newUserForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(5), Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')]],\n      firstName: ['', [Validators.required, Validators.minLength(2)]],\n      lastName: ['', [Validators.required, Validators.minLength(2)]],\n      role: ['', [Validators.required]],\n      organization: ['', []]\n    });\n\n    this.newUserForm.get('role').valueChanges.subscribe(r => {\n      if (r === 'organization') {\n        this.newUserForm.get('organization').setValidators(Validators.required);\n      } else {\n        this.newUserForm.get('organization').setValidators(null);\n      }\n    });\n    this.newOrganization = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.minLength(4)]],\n      desc: ['', []]\n    });\n    this.userService.getUsers().subscribe(users => {\n      this.users = users;\n    });\n\n    this.organizationService.organizations.subscribe(o => {\n      this.organizations = o;\n      if (this.organizations.length) {\n        this.newUserForm.get('organization').setValue(this.organizations[0]._id);\n      }\n    });\n\n  }\n  OnAddUserSubmit() {\n    console.log(this.newUserForm.valid);\n    if (this.newUserForm.valid) {\n      const formUser = new User(\n        this.newUserForm.value.firstName,\n        this.newUserForm.value.lastName,\n        this.newUserForm.value.email,\n        this.newUserForm.value.password,\n        this.newUserForm.value.role,\n        this.newUserForm.value.organization,\n        null\n      );\n      if (this.editUserMode) {\n        formUser._id = this.newUserForm.value.password;\n        this.userService.updateUser(formUser).subscribe(r => {\n          if (r) {\n            this.userFromLabels.opSuccess = 'User Successfully updated';\n          } else {\n            this.userFromLabels.opErr = 'Failed To Update User';\n          }\n          setTimeout(() => {\n            this.userFromLabels.opSuccess = null;\n            this.userFromLabels.opErr = null;\n          }, 3000);\n        }, err => {\n          this.userFromLabels.opErr = err.error;\n          setTimeout(() => {\n            this.userFromLabels.opSuccess = null;\n            this.userFromLabels.opErr = null;\n          }, 3000);\n        }\n        );\n      } else {\n\n      }\n\n    }\n\n  }\n\n\n  openModal(template: TemplateRef<any>) {\n    this.modalRef = this.modalService.show(template);\n\n  }\n  onCreateOrganization() {\n    const organizationToAdd = new Organization();\n    organizationToAdd.desc = this.newOrganization.value.desc || '';\n    organizationToAdd.name = this.newOrganization.value.name;\n\n    this.organizationService.createOrganization(organizationToAdd).subscribe(o => {\n      if (o) {\n        this.organizations.push(o);\n        this.newOrganization.reset();\n        this.modalRef.hide();\n        this.newUserForm.get('organization').setValue(o._id);\n      }\n    });\n\n  }\n  onToggleUser(state: boolean) {\n    this.editUserMode = false;\n    if (state) {\n      this.newUserForm.reset();\n      this.newUserForm.get('password').setValidators([Validators.required, Validators.minLength(5), Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')]);\n    }\n    this.newUserMode = state;\n  }\n  onEditUserEvent(user: User) {\n    this.newUserMode = false;\n    this.newUserForm.reset();\n    if (!user) {\n      this.editUserMode = false;\n      return;\n    }\n    this.editUserMode = true;\n    this.userFromLabels.editTitle = `Edit User ${user.first_name} ${user.last_name}`;\n\n    // remove password validator\n    this.newUserForm.get('password').setValidators([]);\n    this.newUserForm.setValue({\n      email: user.email,\n      firstName: user.first_name,\n      lastName: user.last_name,\n      organization: user.organizationID || '',\n      role: user.role,\n      password: user._id\n    });\n  }\n\n  cancelEdit() {\n    this.editUserMode = false;\n  }\n\n}\n","<h4>Manage Users</h4>\n<table class=\"table table-striped\">\n  <tbody>\n    <tr>\n      <th>Email</th>\n      <th>First Name</th>\n      <th>Last Name</th>\n      <th>Role</th>\n      <th>Organization</th>\n      <th></th>\n    </tr>\n    <tr app-user *ngFor=\"let user of users\" [user]=\"user\" [organizations]=\"organizations\"\n      (EditUserClicked)=\"onEditUserEvent($event)\"></tr>\n  </tbody>\n</table>\n<div>\n  <button (click)=\"onToggleUser(true)\" *ngIf=\"!newUserMode && !editUserMode\" type=\"button\" class=\"btn btn-primary\"><span\n      class=\"glyphicon glyphicon-plus-sign\"></span>\n    Add User</button>\n  <button (click)=\"onToggleUser(false)\" *ngIf=\"newUserMode && !editUserMode\" type=\"button\"\n    class=\"btn btn-secondary\">Close</button>\n\n  <h4 *ngIf=\"editUserMode\">{{ userFromLabels.editTitle }}<button [ngStyle]=\"{ marginLeft: '20px' }\" class=\"btn btn-secondary\" (click)=\"cancelEdit()\">Cancel</button>\n  </h4>\n  <form [formGroup]=\"newUserForm\" (ngSubmit)=\"OnAddUserSubmit()\" *ngIf=\"newUserMode || editUserMode\">\n    <div class=\"form-group\"\n      [ngClass]=\"{ 'has-error': newUserForm.get('email').touched && newUserForm.get('email').errors != null }\">\n      <label for=\"new-email\">User Email</label>\n      <input type=\"text\" id=\"new-email\" class=\"form-control\" formControlName=\"email\" />\n      <span class=\"help-block\" *ngIf=\"newUserForm.get('email').touched && newUserForm.get('email').errors\">Invalid\n        Email</span>\n    </div>\n    <div class=\"form-group\"\n      [ngClass]=\"{ 'has-error': newUserForm.get('firstName').touched && newUserForm.get('firstName').errors != null }\">\n      <label for=\"new-firstname\">User First Name</label>\n      <input type=\"text\" id=\"new-firstname\" class=\"form-control\" formControlName=\"firstName\" />\n      <span class=\"help-block\"\n        *ngIf=\"newUserForm.get('firstName').touched && newUserForm.get('firstName').errors\">Invalid First Name</span>\n    </div>\n    <div class=\"form-group\"\n      [ngClass]=\"{ 'has-error': newUserForm.get('lastName').touched && newUserForm.get('lastName').errors != null }\">\n      <label for=\"new-lastname\">User Last Name</label>\n      <input type=\"text\" id=\"new-lastname\" class=\"form-control\" formControlName=\"lastName\" />\n      <span class=\"help-block\" *ngIf=\"newUserForm.get('lastName').touched && newUserForm.get('lastName').errors\">Invalid\n        Last Name </span>\n    </div>\n    <div class=\"form-group\" *ngIf=\"!editUserMode\"\n      [ngClass]=\"{ 'has-error': newUserForm.get('password').touched && newUserForm.get('password').errors != null }\">\n      <label for=\"new-password\">User Password</label>\n      <input type=\"password\" id=\"new-password\" class=\"form-control\" formControlName=\"password\" />\n      <span class=\"help-block\"></span>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"new-email\">User Role</label>\n      <select class=\"form-control\" formControlName=\"role\">\n        <option *ngFor=\"let role of roles\" [value]=\"role.key\">{{ role.name }}</option>\n      </select>\n      <span class=\"help-block\"></span>\n    </div>\n    <div *ngIf=\"newUserForm.value.role === 'organization'\" class=\"form-group organization-group\"\n      [ngClass]=\"{ 'has-error': newUserForm.get('organization').touched && newUserForm.get('organization').errors != null }\">\n      <label for=\"new-organization\">Select Organization</label>\n      <select class=\"form-control\" formControlName=\"organization\"\n        [value]=\"organizations && organizations.length ? organizations[0]._id : ''\">\n        <option *ngFor=\"let organ of organizations;\" [value]=\"organ._id\">{{ organ.name }}</option>\n      </select>\n      <span class=\"help-block\"></span>\n    </div>\n    <button type=\"button\" class=\"btn btn-success\" (click)=\"OnAddUserSubmit()\">Submit User</button>\n  </form>\n  <ng-template #template>\n    <div class=\"modal-header\">\n      <h4 class=\"modal-title pull-left\">Add New Organization</h4>\n      <button type=\"button\" class=\"close pull-right\" aria-label=\"Close\" (click)=\"modalRef.hide()\">\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n    <div class=\"modal-body\">\n      <form [formGroup]=\"newOrganization\" (ngSubmit)=\"onCreateOrganization()\">\n        <div class=\"form-group\"\n          [ngClass]=\"{ 'has-error': newOrganization.get('name').touched && newOrganization.get('name').errors != null }\">\n          <label for=\"new-organ-name\">Organization Name</label>\n          <input type=\"text\" id=\"new-organ-name\" class=\"form-control\" formControlName=\"name\" />\n          <span class=\"help-block\"\n            *ngIf=\"newOrganization.get('name').touched && newOrganization.get('name').errors\">Invalid Name </span>\n        </div>\n        <div class=\"form-group\"\n          [ngClass]=\"{ 'has-error': newOrganization.get('desc').touched && newOrganization.get('desc').errors != null }\">\n          <label for=\"new-organ-desc\">Organization Description</label>\n          <input type=\"text\" id=\"new-organ-desc\" class=\"form-control\" formControlName=\"desc\" />\n          <span class=\"help-block\"\n            *ngIf=\"newOrganization.get('desc').touched && newOrganization.get('desc').errors\">Invalid Description\n          </span>\n        </div>\n        <button class=\"btn btn-primary\" [disabled]=\"!newOrganization.valid\">Add New Organization</button>\n      </form>\n    </div>\n  </ng-template>\n  <div class=\"alert alert-danger\" *ngIf=\"userFromLabels.opErr\">\n    <p>{{ userFromLabels.opErr }}</p>\n  </div>\n  <div class=\"alert alert-success\" *ngIf=\"userFromLabels.opSuccess\">\n    <p>{{ userFromLabels.opSuccess }}</p>\n  </div>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from 'src/app/models/user';\nimport { UsersService } from 'src/app/services/users.service';\nimport { Organization } from 'src/app/models/organization';\nimport { OrgnizationService } from 'src/app/services/orgnization.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n\n@Component({\n  selector: 'app-user, [app-user]',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.css']\n})\nexport class UserComponent implements OnInit {\n  @Input() user: User;\n  @Input() organizations: Organization[] = [];\n  @Output() EditUserClicked = new EventEmitter<User>();\n  selectedRole: string;\n\n\n  roles: { key: string, name: string }[];\n\n  edit = false;\n  constructor(private userService: UsersService, private organizationService: OrgnizationService) { }\n\n  ngOnInit(): void {\n    this.roles = this.userService.getRoles();\n    this.selectedRole = this.user.role;\n\n  }\n  getRoleName(role: string) {\n    return this.userService.getRoleName(role);\n  }\n  editUser() {\n    this.EditUserClicked.emit(this.user);\n  }\n  cancelEdit() {\n    this.EditUserClicked.emit(null);\n  }\n  saveUser() {\n\n  }\n  getOrganization(organizationID: string): string {\n    if (organizationID && organizationID !== '' && this.organizations && this.organizations.length) {\n      const organizationObj = this.organizations.find(o => o._id === organizationID);\n      if (organizationObj) {\n        return organizationObj.name;\n      }\n    }\n    return '';\n  }\n}\n","<ng-template [ngIf]=\"!edit\">\n  <td>{{ user.email }}</td>\n  <td>{{ user.first_name }}</td>\n  <td>{{ user.last_name }}</td>\n  <td>{{ getRoleName(user.role) }}</td>\n  <td>{{ getOrganization(user.organizationID) }}</td>\n  <td><a (click)=\"editUser()\">Edit <span class=\"glyphicon glyphicon-pencil\"></span></a></td>\n</ng-template>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { User } from '../models/user';\nimport { UsersService } from '../services/users.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.css']\n})\nexport class UsersComponent implements OnInit, OnDestroy {\n\n  user: User;\n  userSub: Subscription;\n\n\n  constructor(private userService: UsersService) { }\n\n  ngOnInit(): void {\n    this.userSub = this.userService.user.subscribe(u => this.user = u);\n  }\n  ngOnDestroy() {\n    this.userSub.unsubscribe();\n  }\n\n}\n","<div class=\"container\">\n  <h2>Hello {{ user.first_name }}, </h2>\n  <p>as an administrator you can edit the system users</p>\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <app-manage-users></app-manage-users>\n    </div>\n    <div class=\"col-md-6\">\n      <app-manage-organization></app-manage-organization>\n    </div>\n  </div>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}